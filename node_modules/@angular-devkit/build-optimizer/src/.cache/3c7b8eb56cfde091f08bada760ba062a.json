{"remainingRequest":"/Users/alivehal/Documents/tuts/portl-bot/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/alivehal/Documents/tuts/portl-bot/node_modules/@ctrl/ngx-emoji-mart/fesm5/ctrl-ngx-emoji-mart.js","dependencies":[{"path":"/Users/alivehal/Documents/tuts/portl-bot/node_modules/@ctrl/ngx-emoji-mart/fesm5/ctrl-ngx-emoji-mart.js","mtime":499162500000},{"path":"/Users/alivehal/Documents/tuts/portl-bot/node_modules/cache-loader/dist/cjs.js","mtime":1539041930837},{"path":"/Users/alivehal/Documents/tuts/portl-bot/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_ctrl_ngx_emoji_mart_ngx_emoji,tslib,_angular_common,_angular_forms PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, Injectable, ChangeDetectorRef, ViewChild, ViewChildren, NgModule } from '@angular/core';\nimport { EmojiService, categories, EmojiModule } from '@ctrl/ngx-emoji-mart/ngx-emoji';\nimport { __values, __assign, __spread } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AnchorsComponent = /** @class */ /*@__PURE__*/ (function () {\n    function AnchorsComponent() {\n        this.categories = [];\n        this.icons = {};\n        this.anchorClick = new EventEmitter();\n    }\n    /**\n     * @param {?} idx\n     * @param {?} cat\n     * @return {?}\n     */\n    AnchorsComponent.prototype.trackByFn = /**\n     * @param {?} idx\n     * @param {?} cat\n     * @return {?}\n     */\n        function (idx, cat) {\n            return cat.id;\n        };\n    /**\n     * @param {?} $event\n     * @param {?} index\n     * @return {?}\n     */\n    AnchorsComponent.prototype.handleClick = /**\n     * @param {?} $event\n     * @param {?} index\n     * @return {?}\n     */\n        function ($event, index) {\n            this.anchorClick.emit({\n                category: this.categories[index],\n                index: index,\n            });\n        };\n    return AnchorsComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar EmojiFrequentlyService = /** @class */ /*@__PURE__*/ (function () {\n    function EmojiFrequentlyService() {\n        this.NAMESPACE = 'emoji-mart';\n        this.frequently = null;\n        this.defaults = {};\n        this.initialized = false;\n        this.DEFAULTS = [\n            '+1',\n            'grinning',\n            'kissing_heart',\n            'heart_eyes',\n            'laughing',\n            'stuck_out_tongue_winking_eye',\n            'sweat_smile',\n            'joy',\n            'scream',\n            'disappointed',\n            'unamused',\n            'weary',\n            'sob',\n            'sunglasses',\n            'heart',\n            'poop',\n        ];\n    }\n    /**\n     * @return {?}\n     */\n    EmojiFrequentlyService.prototype.init = /**\n     * @return {?}\n     */\n        function () {\n            this.frequently = JSON.parse(localStorage.getItem(this.NAMESPACE + \".frequently\") || 'null');\n            this.initialized = true;\n        };\n    /**\n     * @param {?} emoji\n     * @return {?}\n     */\n    EmojiFrequentlyService.prototype.add = /**\n     * @param {?} emoji\n     * @return {?}\n     */\n        function (emoji) {\n            if (!this.initialized) {\n                this.init();\n            }\n            if (!this.frequently) {\n                this.frequently = this.defaults;\n            }\n            if (!this.frequently[emoji.id]) {\n                this.frequently[emoji.id] = 0;\n            }\n            this.frequently[emoji.id] += 1;\n            localStorage.setItem(this.NAMESPACE + \".last\", emoji.id);\n            localStorage.setItem(this.NAMESPACE + \".frequently\", JSON.stringify(this.frequently));\n        };\n    /**\n     * @param {?} perLine\n     * @param {?} totalLines\n     * @return {?}\n     */\n    EmojiFrequentlyService.prototype.get = /**\n     * @param {?} perLine\n     * @param {?} totalLines\n     * @return {?}\n     */\n        function (perLine, totalLines) {\n            var _this = this;\n            if (!this.initialized) {\n                this.init();\n            }\n            if (this.frequently === null) {\n                this.defaults = {};\n                /** @type {?} */\n                var result = [];\n                for (var i = 0; i < perLine; i++) {\n                    this.defaults[this.DEFAULTS[i]] = perLine - i;\n                    result.push(this.DEFAULTS[i]);\n                }\n                return result;\n            }\n            /** @type {?} */\n            var quantity = perLine * totalLines;\n            /** @type {?} */\n            var frequentlyKeys = Object.keys(this.frequently);\n            /** @type {?} */\n            var sorted = frequentlyKeys\n                .sort(function (a, b) { return ((_this.frequently))[a] - /** @type {?} */ ((_this.frequently))[b]; })\n                .reverse();\n            /** @type {?} */\n            var sliced = sorted.slice(0, quantity);\n            /** @type {?} */\n            var last = localStorage.getItem(this.NAMESPACE + \".last\");\n            if (last && !sliced.includes(last)) {\n                sliced.pop();\n                sliced.push(last);\n            }\n            return sliced;\n        };\n    return EmojiFrequentlyService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar CategoryComponent = /** @class */ /*@__PURE__*/ (function () {\n    function CategoryComponent(ref, emojiService, frequently) {\n        this.ref = ref;\n        this.emojiService = emojiService;\n        this.frequently = frequently;\n        this.hasStickyPosition = true;\n        this.name = '';\n        this.native = true;\n        this.perLine = 9;\n        this.totalFrequentLines = 4;\n        this.recent = [];\n        this.custom = [];\n        this.hideObsolete = true;\n        this.emojiOver = new EventEmitter();\n        this.emojiLeave = new EventEmitter();\n        this.emojiClick = new EventEmitter();\n        this.containerStyles = {};\n        this.labelStyles = {};\n        this.labelSpanStyles = {};\n        this.margin = 0;\n        this.minMargin = 0;\n        this.maxMargin = 0;\n        this.top = 0;\n    }\n    /**\n     * @return {?}\n     */\n    CategoryComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.emojis = this.getEmojis();\n            if (!this.emojis) {\n                this.containerStyles = { display: 'none' };\n            }\n            if (!this.hasStickyPosition) {\n                this.labelStyles = { height: 28 };\n                this.labelSpanStyles = { position: 'absolute' };\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CategoryComponent.prototype.memoizeSize = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var parent = this.container.nativeElement.parentNode.parentNode;\n            var _a = this.container.nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height;\n            /** @type {?} */\n            var parentTop = parent.getBoundingClientRect().top;\n            /** @type {?} */\n            var labelHeight = this.label.nativeElement.getBoundingClientRect().height;\n            this.top = top - parentTop + parent.scrollTop;\n            if (height === 0) {\n                this.maxMargin = 0;\n            }\n            else {\n                this.maxMargin = height - labelHeight;\n            }\n        };\n    /**\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    CategoryComponent.prototype.handleScroll = /**\n     * @param {?} scrollTop\n     * @return {?}\n     */\n        function (scrollTop) {\n            /** @type {?} */\n            var margin = scrollTop - this.top;\n            margin = margin < this.minMargin ? this.minMargin : margin;\n            margin = margin > this.maxMargin ? this.maxMargin : margin;\n            if (margin === this.margin) {\n                return false;\n            }\n            if (!this.hasStickyPosition) {\n                this.label.nativeElement.style.top = margin + \"px\";\n            }\n            this.margin = margin;\n            return true;\n        };\n    /**\n     * @return {?}\n     */\n    CategoryComponent.prototype.getEmojis = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.name === 'Recent') {\n                /** @type {?} */\n                var frequentlyUsed = this.recent || this.frequently.get(this.perLine, this.totalFrequentLines);\n                if (!frequentlyUsed || !frequentlyUsed.length) {\n                    frequentlyUsed = this.frequently.get(this.perLine, this.totalFrequentLines);\n                }\n                if (frequentlyUsed.length) {\n                    this.emojis = frequentlyUsed\n                        .map(function (id) {\n                        /** @type {?} */\n                        var emoji = _this.custom.filter(function (e) { return e.id === id; })[0];\n                        if (emoji) {\n                            return emoji;\n                        }\n                        return id;\n                    })\n                        .filter(function (id) { return !!_this.emojiService.getData(id); });\n                }\n                if ((!this.emojis || this.emojis.length === 0) && frequentlyUsed.length > 0) {\n                    return null;\n                }\n            }\n            if (this.emojis) {\n                this.emojis = this.emojis.slice(0);\n            }\n            return this.emojis;\n        };\n    /**\n     * @param {?} display\n     * @return {?}\n     */\n    CategoryComponent.prototype.updateDisplay = /**\n     * @param {?} display\n     * @return {?}\n     */\n        function (display) {\n            this.containerStyles.display = display;\n            this.getEmojis();\n            this.ref.detectChanges();\n        };\n    /**\n     * @param {?} index\n     * @param {?} item\n     * @return {?}\n     */\n    CategoryComponent.prototype.trackById = /**\n     * @param {?} index\n     * @param {?} item\n     * @return {?}\n     */\n        function (index, item) {\n            return item;\n        };\n    return CategoryComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} arr\n * @return {?}\n */\nfunction uniq(arr) {\n    return arr.reduce(function (acc, item) {\n        if (!acc.includes(item)) {\n            acc.push(item);\n        }\n        return acc;\n    }, []);\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction intersect(a, b) {\n    /** @type {?} */\n    var uniqA = uniq(a);\n    /** @type {?} */\n    var uniqB = uniq(b);\n    return uniqA.filter(function (item) { return uniqB.indexOf(item) >= 0; });\n}\n/**\n * @return {?}\n */\nfunction measureScrollbar() {\n    if (typeof document === 'undefined') {\n        return 0;\n    }\n    /** @type {?} */\n    var div = document.createElement('div');\n    div.style.width = '100px';\n    div.style.height = '100px';\n    div.style.overflow = 'scroll';\n    div.style.position = 'absolute';\n    div.style.top = '-9999px';\n    document.body.appendChild(div);\n    /** @type {?} */\n    var scrollbarWidth = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n    return scrollbarWidth;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar EmojiSearch = /** @class */ /*@__PURE__*/ (function () {\n    function EmojiSearch(emojiService) {\n        var e_1, _a;\n        var _this = this;\n        this.emojiService = emojiService;\n        this.originalPool = {};\n        this.index = {};\n        this.emojisList = {};\n        this.emoticonsList = {};\n        this.emojiSearch = {};\n        var _loop_1 = function (emojiData) {\n            var short_names = emojiData.short_names, emoticons = emojiData.emoticons;\n            /** @type {?} */\n            var id = short_names[0];\n            emoticons.forEach(function (emoticon) {\n                if (_this.emoticonsList[emoticon]) {\n                    return;\n                }\n                _this.emoticonsList[emoticon] = id;\n            });\n            this_1.emojisList[id] = this_1.emojiService.getSanitizedData(id);\n            this_1.originalPool[id] = emojiData;\n        };\n        var this_1 = this;\n        try {\n            for (var _b = __values(this.emojiService.emojis), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var emojiData = _c.value;\n                _loop_1(emojiData);\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    }\n    /**\n     * @param {?} custom\n     * @param {?} pool\n     * @return {?}\n     */\n    EmojiSearch.prototype.addCustomToPool = /**\n     * @param {?} custom\n     * @param {?} pool\n     * @return {?}\n     */\n        function (custom, pool) {\n            var _this = this;\n            custom.forEach(function (emoji) {\n                /** @type {?} */\n                var emojiId = emoji.id || emoji.short_names[0];\n                if (emojiId && !pool[emojiId]) {\n                    pool[emojiId] = _this.emojiService.getData(emoji);\n                    _this.emojisList[emojiId] = _this.emojiService.getSanitizedData(emoji);\n                }\n            });\n        };\n    /**\n     * @param {?} value\n     * @param {?=} emojisToShowFilter\n     * @param {?=} maxResults\n     * @param {?=} include\n     * @param {?=} exclude\n     * @param {?=} custom\n     * @return {?}\n     */\n    EmojiSearch.prototype.search = /**\n     * @param {?} value\n     * @param {?=} emojisToShowFilter\n     * @param {?=} maxResults\n     * @param {?=} include\n     * @param {?=} exclude\n     * @param {?=} custom\n     * @return {?}\n     */\n        function (value, emojisToShowFilter, maxResults, include, exclude, custom) {\n            var _this = this;\n            if (maxResults === void 0) {\n                maxResults = 75;\n            }\n            if (include === void 0) {\n                include = [];\n            }\n            if (exclude === void 0) {\n                exclude = [];\n            }\n            if (custom === void 0) {\n                custom = [];\n            }\n            this.addCustomToPool(custom, this.originalPool);\n            /** @type {?} */\n            var results;\n            /** @type {?} */\n            var pool = this.originalPool;\n            if (value.length) {\n                if (value === '-' || value === '-1') {\n                    return [this.emojisList['-1']];\n                }\n                /** @type {?} */\n                var values = value.toLowerCase().split(/[\\s|,|\\-|_]+/);\n                /** @type {?} */\n                var allResults = [];\n                if (values.length > 2) {\n                    values = [values[0], values[1]];\n                }\n                if (include.length || exclude.length) {\n                    pool = {};\n                    categories.forEach(function (category) {\n                        /** @type {?} */\n                        var isIncluded = include && include.length\n                            ? include.indexOf(category.id) > -1\n                            : true;\n                        /** @type {?} */\n                        var isExcluded = exclude && exclude.length\n                            ? exclude.indexOf(category.id) > -1\n                            : false;\n                        if (!isIncluded || isExcluded) {\n                            return;\n                        } /** @type {?} */\n                        ((category.emojis)).forEach(function (emojiId) { return (pool[emojiId] = _this.emojiService.names[emojiId]); });\n                    });\n                    if (custom.length) {\n                        /** @type {?} */\n                        var customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;\n                        /** @type {?} */\n                        var customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;\n                        if (customIsIncluded && !customIsExcluded) {\n                            this.addCustomToPool(custom, pool);\n                        }\n                    }\n                }\n                allResults = values\n                    .map(function (v) {\n                    /** @type {?} */\n                    var aPool = pool;\n                    /** @type {?} */\n                    var aIndex = _this.index;\n                    /** @type {?} */\n                    var length = 0;\n                    var _loop_2 = function (charIndex) {\n                        var e_2, _a;\n                        /** @type {?} */\n                        var char = v[charIndex];\n                        length++;\n                        if (!aIndex[char]) {\n                            aIndex[char] = {};\n                        }\n                        aIndex = aIndex[char];\n                        if (!aIndex.results) {\n                            /** @type {?} */\n                            var scores_1 = {};\n                            aIndex.results = [];\n                            aIndex.pool = {};\n                            try {\n                                for (var _b = __values(Object.keys(aPool)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                                    var id = _c.value;\n                                    /** @type {?} */\n                                    var emoji = aPool[id];\n                                    if (!_this.emojiSearch[id]) {\n                                        _this.emojiSearch[id] = _this.buildSearch(emoji.short_names, emoji.name, emoji.keywords, emoji.emoticons);\n                                    }\n                                    /** @type {?} */\n                                    var query = _this.emojiSearch[id];\n                                    /** @type {?} */\n                                    var sub = v.substr(0, length);\n                                    /** @type {?} */\n                                    var subIndex = query.indexOf(sub);\n                                    if (subIndex !== -1) {\n                                        /** @type {?} */\n                                        var score = subIndex + 1;\n                                        if (sub === id) {\n                                            score = 0;\n                                        }\n                                        aIndex.results.push(_this.emojisList[id]);\n                                        aIndex.pool[id] = emoji;\n                                        scores_1[id] = score;\n                                    }\n                                }\n                            }\n                            catch (e_2_1) {\n                                e_2 = { error: e_2_1 };\n                            }\n                            finally {\n                                try {\n                                    if (_c && !_c.done && (_a = _b.return))\n                                        _a.call(_b);\n                                }\n                                finally {\n                                    if (e_2)\n                                        throw e_2.error;\n                                }\n                            }\n                            aIndex.results.sort(function (a, b) {\n                                /** @type {?} */\n                                var aScore = scores_1[a.id];\n                                /** @type {?} */\n                                var bScore = scores_1[b.id];\n                                return aScore - bScore;\n                            });\n                        }\n                        aPool = aIndex.pool;\n                    };\n                    for (var charIndex = 0; charIndex < v.length; charIndex++) {\n                        _loop_2(charIndex);\n                    }\n                    return aIndex.results;\n                })\n                    .filter(function (a) { return a; });\n                if (allResults.length > 1) {\n                    results = intersect.apply(null, allResults);\n                }\n                else if (allResults.length) {\n                    results = allResults[0];\n                }\n                else {\n                    results = [];\n                }\n            }\n            if (results) {\n                if (emojisToShowFilter) {\n                    results = results.filter(function (result) {\n                        return emojisToShowFilter(_this.emojiService.names[result.id]);\n                    });\n                }\n                if (results && results.length > maxResults) {\n                    results = results.slice(0, maxResults);\n                }\n            }\n            return results || null;\n        };\n    /**\n     * @param {?} short_names\n     * @param {?} name\n     * @param {?} keywords\n     * @param {?} emoticons\n     * @return {?}\n     */\n    EmojiSearch.prototype.buildSearch = /**\n     * @param {?} short_names\n     * @param {?} name\n     * @param {?} keywords\n     * @param {?} emoticons\n     * @return {?}\n     */\n        function (short_names, name, keywords, emoticons) {\n            /** @type {?} */\n            var search = [];\n            /** @type {?} */\n            var addToSearch = function (strings, split) {\n                if (!strings) {\n                    return;\n                }\n                (Array.isArray(strings) ? strings : [strings]).forEach(function (string) {\n                    (split ? string.split(/[-|_|\\s]+/) : [string]).forEach(function (s) {\n                        s = s.toLowerCase();\n                        if (!search.includes(s)) {\n                            search.push(s);\n                        }\n                    });\n                });\n            };\n            addToSearch(short_names, true);\n            addToSearch(name, true);\n            addToSearch(keywords, false);\n            addToSearch(emoticons, false);\n            return search.join(',');\n        };\n    return EmojiSearch;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar PreviewComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PreviewComponent(ref, emojiService) {\n        this.ref = ref;\n        this.emojiService = emojiService;\n        this.skinChange = new EventEmitter();\n        this.emojiData = {};\n    }\n    /**\n     * @return {?}\n     */\n    PreviewComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.emoji) {\n                return;\n            }\n            this.emojiData = /** @type {?} */ ((this.emojiService.getData(this.emoji, this.emojiSkin, this.emojiSet)));\n            /** @type {?} */\n            var knownEmoticons = [];\n            /** @type {?} */\n            var listedEmoticons = [];\n            /** @type {?} */\n            var emoitcons = this.emojiData.emoticons || [];\n            emoitcons.forEach(function (emoticon) {\n                if (knownEmoticons.indexOf(emoticon.toLowerCase()) >= 0) {\n                    return;\n                }\n                knownEmoticons.push(emoticon.toLowerCase());\n                listedEmoticons.push(emoticon);\n            });\n            this.listedEmoticons = listedEmoticons;\n        };\n    return PreviewComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar SearchComponent = /** @class */ /*@__PURE__*/ (function () {\n    function SearchComponent(emojiSearch) {\n        this.emojiSearch = emojiSearch;\n        this.maxResults = 75;\n        this.autoFocus = false;\n        this.include = [];\n        this.exclude = [];\n        this.custom = [];\n        this.search = new EventEmitter();\n        this.enterKey = new EventEmitter();\n        this.isSearching = false;\n        this.query = '';\n    }\n    /**\n     * @return {?}\n     */\n    SearchComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.icon = this.icons[\"search\"];\n        };\n    /**\n     * @return {?}\n     */\n    SearchComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.autoFocus) {\n                this.inputRef.nativeElement.focus();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    SearchComponent.prototype.clear = /**\n     * @return {?}\n     */\n        function () {\n            this.query = '';\n            this.handleSearch('');\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    SearchComponent.prototype.handleEnterKey = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            this.enterKey.emit($event);\n            $event.preventDefault();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SearchComponent.prototype.handleSearch = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (value === '') {\n                this.icon = this.icons[\"search\"];\n                this.isSearching = false;\n            }\n            else {\n                this.icon = this.icons[\"delete\"];\n                this.isSearching = true;\n            }\n            this.search.emit(this.emojiSearch.search(this.query, this.emojisToShowFilter, this.maxResults, this.include, this.exclude, this.custom));\n        };\n    /**\n     * @return {?}\n     */\n    SearchComponent.prototype.handleChange = /**\n     * @return {?}\n     */\n        function () {\n            this.handleSearch(this.query);\n        };\n    return SearchComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar categories$1 = {\n    activity: \"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m10 11h-5c.3-2.5 1.3-4.8 2-6.1a10 10 0 0 1 3 6.1m-9 0V2a10 10 0 0 1 4.4 1.6A18 18 0 0 0 15 11h-2zm-2 0H9a18 18 0 0 0-2.4-7.4A10 10 0 0 1 11 2.1V11zm0 2v9a10 10 0 0 1-4.4-1.6A18 18 0 0 0 9 13h2zm4 0a18 18 0 0 0 2.4 7.4 10 10 0 0 1-4.4 1.5V13h2zM5 4.9c.7 1.3 1.7 3.6 2 6.1H2a10 10 0 0 1 3-6.1M2 13h5c-.3 2.5-1.3 4.8-2 6.1A10 10 0 0 1 2 13m17 6.1c-.7-1.3-1.7-3.6-2-6.1h5a10 10 0 0 1-3 6.1\",\n    custom: \"M10 1h3v21h-3zm10.186 4l1.5 2.598L3.5 18.098 2 15.5zM2 7.598L3.5 5l18.186 10.5-1.5 2.598z\",\n    flags: \"M0 0l6 24h2L2 0zm21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.6 3h7.8l2 8H8.6l-2-8zm8.8 10l-2.9 1.9-.4-1.9h3.3zm3.6 0l-1.5-6h2l2 8H16l3-2z\",\n    foods: \"M17 5c-1.8 0-2.9.4-3.7 1 .5-1.3 1.8-3 4.7-3a1 1 0 0 0 0-2c-3 0-4.6 1.3-5.5 2.5l-.2.2c-.6-1.9-1.5-3.7-3-3.7C8.5 0 7.7.3 7 1c-2 1.5-1.7 2.9-.5 4C3.6 5.2 0 7.4 0 13c0 4.6 5 11 9 11 2 0 2.4-.5 3-1 .6.5 1 1 3 1 4 0 9-6.4 9-11 0-6-4-8-7-8M8.2 2.5c.7-.5 1-.5 1-.5.4.2 1 1.4 1.4 3-1.6-.6-2.8-1.3-3-1.8l.6-.7M15 22c-1 0-1.2-.1-1.6-.4l-.1-.2a2 2 0 0 0-2.6 0l-.1.2c-.4.3-.5.4-1.6.4-2.8 0-7-5.4-7-9 0-6 4.5-6 5-6 2 0 2.5.4 3.4 1.2l.3.3a2 2 0 0 0 2.6 0l.3-.3c1-.8 1.5-1.2 3.4-1.2.5 0 5 .1 5 6 0 3.6-4.2 9-7 9\",\n    nature: \"M15.5 8a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m-7 0a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m10.43-8h-.02c-.97 0-2.14.79-3.02 1.5A13.88 13.88 0 0 0 12 .99c-1.28 0-2.62.13-3.87.51C7.24.8 6.07 0 5.09 0h-.02C3.35 0 .07 2.67 0 7.03c-.04 2.47.28 4.23 1.04 5 .26.27.88.69 1.3.9.19 3.17.92 5.23 2.53 6.37.9.64 2.19.95 3.2 1.1-.03.2-.07.4-.07.6 0 1.77 2.35 3 4 3s4-1.23 4-3c0-.2-.04-.4-.07-.59 2.57-.38 5.43-1.87 5.92-7.58.4-.22.89-.57 1.1-.8.77-.76 1.09-2.52 1.05-5C23.93 2.67 20.65 0 18.93 0M3.23 9.13c-.24.29-.84 1.16-.9 1.24A9.67 9.67 0 0 1 2 7.08c.05-3.28 2.48-4.97 3.1-5.03.25.02.72.27 1.26.65A7.95 7.95 0 0 0 4 7.82c-.14.55-.4.86-.79 1.31M12 22c-.9 0-1.95-.7-2-1 0-.65.47-1.24 1-1.6v.6a1 1 0 1 0 2 0v-.6c.52.36 1 .95 1 1.6-.05.3-1.1 1-2 1m3-3.48v.02a4.75 4.75 0 0 0-1.26-1.02c1.09-.52 2.24-1.33 2.24-2.22 0-1.84-1.78-2.2-3.98-2.2s-3.98.36-3.98 2.2c0 .89 1.15 1.7 2.24 2.22A4.8 4.8 0 0 0 9 18.54v-.03a6.1 6.1 0 0 1-2.97-.84c-1.3-.92-1.84-3.04-1.86-6.48l.03-.04c.5-.82 1.49-1.45 1.8-3.1C6 6 7.36 4.42 8.36 3.53c1.01-.35 2.2-.53 3.59-.53 1.45 0 2.68.2 3.73.57 1 .9 2.32 2.46 2.32 4.48.31 1.65 1.3 2.27 1.8 3.1l.1.18c-.06 5.97-1.95 7.01-4.9 7.19m6.63-8.2l-.11-.2a7.59 7.59 0 0 0-.74-.98 3.02 3.02 0 0 1-.79-1.32 7.93 7.93 0 0 0-2.35-5.12c.53-.38 1-.63 1.26-.65.64.07 3.05 1.77 3.1 5.03.02 1.81-.35 3.22-.37 3.24\",\n    objects: \"M12 0a9 9 0 0 0-5 16.5V21s2 3 5 3 5-3 5-3v-4.5A9 9 0 0 0 12 0zm0 2a7 7 0 1 1 0 14 7 7 0 0 1 0-14zM9 17.5a9 9 0 0 0 6 0v.8a7 7 0 0 1-3 .7 7 7 0 0 1-3-.7v-.8zm.2 3a8.9 8.9 0 0 0 2.8.5c1 0 1.9-.2 2.8-.5-.6.7-1.6 1.5-2.8 1.5-1.1 0-2.1-.8-2.8-1.5zm5.5-8.1c-.8 0-1.1-.8-1.5-1.8-.5-1-.7-1.5-1.2-1.5s-.8.5-1.3 1.5c-.4 1-.8 1.8-1.6 1.8h-.3c-.5-.2-.8-.7-1.3-1.8l-.2-1A3 3 0 0 0 7 9a1 1 0 0 1 0-2c1.7 0 2 1.4 2.2 2.1.5-1 1.3-2 2.8-2 1.5 0 2.3 1.1 2.7 2.1.2-.8.6-2.2 2.3-2.2a1 1 0 1 1 0 2c-.2 0-.3.5-.3.7a6.5 6.5 0 0 1-.3 1c-.5 1-.8 1.7-1.7 1.7\",\n    people: \"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20M8 7a2 2 0 1 0 0 4 2 2 0 0 0 0-4m8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-.8 8c-.7 1.2-1.8 2-3.3 2-1.5 0-2.7-.8-3.4-2H15m3-2H6a6 6 0 1 0 12 0\",\n    places: \"M6.5 12a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5.5.2.5.5-.2.5-.5.5m11-3a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5.5.2.5.5-.2.5-.5.5m5-5.5l-1-.4-.1-.1h.6c.6 0 1-.4 1-1 0-1-.9-2-2-2h-.6l-.8-1.7A3 3 0 0 0 16.8 2H7.2a3 3 0 0 0-2.8 2.3L3.6 6H3a2 2 0 0 0-2 2c0 .6.4 1 1 1h.6v.1l-1 .4a2 2 0 0 0-1.4 2l.7 7.6a1 1 0 0 0 1 .9H3v1c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-1h6v1c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-1h1.1a1 1 0 0 0 1-.9l.7-7.5a2 2 0 0 0-1.3-2.1M6.3 4.9c.1-.5.5-.9 1-.9h9.5c.4 0 .8.4 1 .9L19.2 9H4.7l1.6-4.1zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.2-3H2.8l-.7-6.6.9-.4h18l.9.4-.7 6.6z\",\n    recent: \"M13 4h-2v7H9v2h2v2h2v-2h4v-2h-4zm-1-4a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20\",\n    symbols: \"M0 0h11v2H0zm4 11h3V6h4V4H0v2h4zm11.5 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5m0-2.99a.5.5 0 0 1 0 .99c-.28 0-.5-.22-.5-.5s.22-.49.5-.49m6 5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 2.99a.5.5 0 0 1-.5-.5.5.5 0 0 1 1 .01.5.5 0 0 1-.5.49m.5-9l-9 9 1.51 1.5 9-9zm-5-2c2.2 0 4-1.12 4-2.5V2s.98-.16 1.5.95C23 4.05 23 6 23 6s1-1.12 1-3.13C24-.02 21 0 21 0h-2v6.35A5.85 5.85 0 0 0 17 6c-2.2 0-4 1.12-4 2.5s1.8 2.5 4 2.5m-6.7 9.48L8.82 18.9a47.54 47.54 0 0 1-1.44 1.13c-.3-.3-.99-1.02-2.04-2.19.9-.83 1.47-1.46 1.72-1.89s.38-.87.38-1.33c0-.6-.27-1.18-.82-1.76-.54-.58-1.33-.87-2.35-.87-1 0-1.79.29-2.34.87-.56.6-.83 1.18-.83 1.79 0 .81.42 1.75 1.25 2.8a6.57 6.57 0 0 0-1.8 1.79 3.46 3.46 0 0 0-.51 1.83c0 .86.3 1.56.92 2.1a3.5 3.5 0 0 0 2.42.83c1.17 0 2.44-.38 3.81-1.14L8.23 24h2.82l-2.09-2.38 1.34-1.14zM3.56 14.1a1.02 1.02 0 0 1 .73-.28c.31 0 .56.08.75.25a.85.85 0 0 1 .28.66c0 .52-.42 1.11-1.26 1.78-.53-.65-.8-1.23-.8-1.74a.9.9 0 0 1 .3-.67m.18 7.9c-.43 0-.78-.12-1.06-.35-.28-.23-.41-.49-.41-.76 0-.6.5-1.3 1.52-2.09a31.23 31.23 0 0 0 2.25 2.44c-.92.5-1.69.76-2.3.76\",\n};\n/** @type {?} */\nvar search = {\n    search: \"M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\",\n    delete: \"M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z\",\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar I18N = {\n    search: 'Search',\n    notfound: 'No Emoji Found',\n    categories: {\n        search: 'Search Results',\n        recent: 'Frequently Used',\n        people: 'Smileys & People',\n        nature: 'Animals & Nature',\n        foods: 'Food & Drink',\n        activity: 'Activity',\n        places: 'Travel & Places',\n        objects: 'Objects',\n        symbols: 'Symbols',\n        flags: 'Flags',\n        custom: 'Custom',\n    },\n};\nvar PickerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PickerComponent(ref, frequently) {\n        var _this = this;\n        this.ref = ref;\n        this.frequently = frequently;\n        this.perLine = 9;\n        this.totalFrequentLines = 4;\n        this.i18n = {};\n        this.style = {};\n        this.title = 'Emoji Mart™';\n        this.emoji = 'department_store';\n        this.color = '#ae65c5';\n        this.hideObsolete = true;\n        /**\n         * all categories shown\n         */\n        this.categories = [];\n        /**\n         * used to temporarily draw categories\n         */\n        this.activeCategories = [];\n        this.set = 'apple';\n        this.skin = 1;\n        this.native = false;\n        this.emojiSize = 24;\n        this.sheetSize = 64;\n        this.showPreview = true;\n        this.emojiTooltip = false;\n        this.autoFocus = false;\n        this.custom = [];\n        this.hideRecent = true;\n        this.notFoundEmoji = 'sleuth_or_spy';\n        this.categoriesIcons = categories$1;\n        this.searchIcons = search;\n        this.emojiClick = new EventEmitter();\n        this.emojiSelect = new EventEmitter();\n        this.scrollHeight = 0;\n        this.clientHeight = 0;\n        this.firstRender = true;\n        this.NAMESPACE = 'emoji-mart';\n        this.measureScrollbar = 0;\n        this.RECENT_CATEGORY = {\n            id: 'recent',\n            name: 'Recent',\n            emojis: null,\n        };\n        this.SEARCH_CATEGORY = {\n            id: 'search',\n            name: 'Search',\n            emojis: null,\n            anchor: false,\n        };\n        this.CUSTOM_CATEGORY = {\n            id: 'custom',\n            name: 'Custom',\n            emojis: [],\n        };\n        this.backgroundImageFn = function (set, sheetSize) {\n            return \"https://unpkg.com/emoji-datasource-\" + _this.set + \"@4.0.4/img/\" + _this.set + \"/sheets-256/\" + _this.sheetSize + \".png\";\n        };\n    }\n    /**\n     * @return {?}\n     */\n    PickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var e_1, _a;\n            // measure scroll\n            this.measureScrollbar = measureScrollbar();\n            this.i18n = __assign({}, I18N, this.i18n);\n            this.i18n.categories = __assign({}, I18N.categories, this.i18n.categories);\n            this.skin =\n                JSON.parse(localStorage.getItem(this.NAMESPACE + \".skin\") || 'null') ||\n                    this.skin;\n            /** @type {?} */\n            var allCategories = __spread(categories);\n            if (this.custom.length > 0) {\n                this.CUSTOM_CATEGORY.emojis = this.custom.map(function (emoji) {\n                    return __assign({}, emoji, { id: emoji.short_names[0], custom: true });\n                });\n                allCategories.push(this.CUSTOM_CATEGORY);\n            }\n            if (this.include !== undefined) {\n                allCategories.sort(function (a, b) {\n                    if ( /** @type {?} */((_this.include)).indexOf(a.id) > /** @type {?} */ ((_this.include)).indexOf(b.id)) {\n                        return 1;\n                    }\n                    return -1;\n                });\n            }\n            try {\n                for (var allCategories_1 = __values(allCategories), allCategories_1_1 = allCategories_1.next(); !allCategories_1_1.done; allCategories_1_1 = allCategories_1.next()) {\n                    var category = allCategories_1_1.value;\n                    /** @type {?} */\n                    var isIncluded = this.include && this.include.length\n                        ? this.include.indexOf(category.id) > -1\n                        : true;\n                    /** @type {?} */\n                    var isExcluded = this.exclude && this.exclude.length\n                        ? this.exclude.indexOf(category.id) > -1\n                        : false;\n                    if (!isIncluded || isExcluded) {\n                        continue;\n                    }\n                    if (this.emojisToShowFilter) {\n                        /** @type {?} */\n                        var newEmojis = [];\n                        var emojis = category.emojis;\n                        for (var emojiIndex = 0; emojiIndex < /** @type {?} */ ((emojis)).length; emojiIndex++) {\n                            /** @type {?} */\n                            var emoji = /** @type {?} */ ((emojis))[emojiIndex];\n                            if (this.emojisToShowFilter(emoji)) {\n                                newEmojis.push(emoji);\n                            }\n                        }\n                        if (newEmojis.length) {\n                            /** @type {?} */\n                            var newCategory = {\n                                emojis: newEmojis,\n                                name: category.name,\n                                id: category.id,\n                            };\n                            this.categories.push(newCategory);\n                        }\n                    }\n                    else {\n                        this.categories.push(category);\n                    }\n                    this.categoriesIcons = __assign({}, categories$1, this.categoriesIcons);\n                    this.searchIcons = __assign({}, search, this.searchIcons);\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (allCategories_1_1 && !allCategories_1_1.done && (_a = allCategories_1.return))\n                        _a.call(allCategories_1);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n            /** @type {?} */\n            var includeRecent = this.include && this.include.length\n                ? this.include.indexOf(this.RECENT_CATEGORY.id) > -1\n                : true;\n            /** @type {?} */\n            var excludeRecent = this.exclude && this.exclude.length\n                ? this.exclude.indexOf(this.RECENT_CATEGORY.id) > -1\n                : false;\n            if (includeRecent && !excludeRecent) {\n                this.hideRecent = false;\n                this.categories.unshift(this.RECENT_CATEGORY);\n            }\n            if (this.categories[0]) {\n                this.categories[0].first = true;\n            }\n            this.categories.unshift(this.SEARCH_CATEGORY);\n            this.selected = this.categories.filter(function (category) { return category.first; })[0].name;\n            this.activeCategories = this.categories.slice(0, 3);\n            setTimeout(function () {\n                _this.activeCategories = _this.categories;\n                _this.ref.markForCheck();\n                setTimeout(function () { return _this.updateCategoriesSize(); });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    PickerComponent.prototype.updateCategoriesSize = /**\n     * @return {?}\n     */\n        function () {\n            this.categoryRefs.forEach(function (component) { return component.memoizeSize(); });\n            if (this.scrollRef) {\n                /** @type {?} */\n                var target = this.scrollRef.nativeElement;\n                this.scrollHeight = target.scrollHeight;\n                this.clientHeight = target.clientHeight;\n            }\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    PickerComponent.prototype.handleAnchorClick = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            this.updateCategoriesSize();\n            /** @type {?} */\n            var component = this.categoryRefs.find(function (n) { return n.id === $event.category.id; });\n            if (this.SEARCH_CATEGORY.emojis) {\n                this.handleSearch(null);\n                this.searchRef.clear();\n            }\n            if (component) {\n                var top_1 = component.top;\n                if ($event.category.first) {\n                    top_1 = 0;\n                }\n                else {\n                    top_1 += 1;\n                }\n                this.scrollRef.nativeElement.scrollTop = top_1;\n            }\n            this.selected = $event.category.name;\n            this.nextScroll = $event.category.name;\n        };\n    /**\n     * @param {?} index\n     * @param {?} item\n     * @return {?}\n     */\n    PickerComponent.prototype.categoryTrack = /**\n     * @param {?} index\n     * @param {?} item\n     * @return {?}\n     */\n        function (index, item) {\n            return item.id;\n        };\n    /**\n     * @return {?}\n     */\n    PickerComponent.prototype.handleScroll = /**\n     * @return {?}\n     */\n        function () {\n            var e_2, _a;\n            if (this.nextScroll) {\n                this.selected = this.nextScroll;\n                this.nextScroll = undefined;\n                return;\n            }\n            if (!this.scrollRef) {\n                return;\n            }\n            /** @type {?} */\n            var activeCategory = null;\n            if (this.SEARCH_CATEGORY.emojis) {\n                activeCategory = this.SEARCH_CATEGORY;\n            }\n            else {\n                /** @type {?} */\n                var target = this.scrollRef.nativeElement;\n                // check scroll is not at bottom\n                if (target.scrollTop === 0) {\n                    // hit the TOP\n                    activeCategory = this.categories.find(function (n) { return n.first === true; });\n                }\n                else if (target.scrollHeight - target.scrollTop === this.clientHeight) {\n                    // scrolled to bottom activate last category\n                    activeCategory = this.categories[this.categories.length - 1];\n                }\n                else {\n                    var _loop_1 = function (category) {\n                        /** @type {?} */\n                        var component = this_1.categoryRefs.find(function (n) { return n.id === category.id; });\n                        /** @type {?} */\n                        var active = /** @type {?} */ ((component)).handleScroll(target.scrollTop);\n                        if (active) {\n                            activeCategory = category;\n                        }\n                    };\n                    var this_1 = this;\n                    try {\n                        // scrolling\n                        for (var _b = __values(this.categories), _c = _b.next(); !_c.done; _c = _b.next()) {\n                            var category = _c.value;\n                            _loop_1(category);\n                        }\n                    }\n                    catch (e_2_1) {\n                        e_2 = { error: e_2_1 };\n                    }\n                    finally {\n                        try {\n                            if (_c && !_c.done && (_a = _b.return))\n                                _a.call(_b);\n                        }\n                        finally {\n                            if (e_2)\n                                throw e_2.error;\n                        }\n                    }\n                }\n                this.scrollTop = target.scrollTop;\n            }\n            if (activeCategory) {\n                this.selected = activeCategory.name;\n            }\n        };\n    /**\n     * @param {?} $emojis\n     * @return {?}\n     */\n    PickerComponent.prototype.handleSearch = /**\n     * @param {?} $emojis\n     * @return {?}\n     */\n        function ($emojis) {\n            var e_3, _a;\n            this.SEARCH_CATEGORY.emojis = $emojis;\n            try {\n                for (var _b = __values(this.categoryRefs.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var component = _c.value;\n                    if (component.name === 'Search') {\n                        component.emojis = $emojis;\n                        component.updateDisplay($emojis ? 'block' : 'none');\n                    }\n                    else {\n                        component.updateDisplay($emojis ? 'none' : 'block');\n                    }\n                }\n            }\n            catch (e_3_1) {\n                e_3 = { error: e_3_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_3)\n                        throw e_3.error;\n                }\n            }\n            // this.forceUpdate();\n            this.scrollRef.nativeElement.scrollTop = 0;\n            this.handleScroll();\n        };\n    /**\n     * @param {?} $event\n     * @param {?=} emoji\n     * @return {?}\n     */\n    PickerComponent.prototype.handleEnterKey = /**\n     * @param {?} $event\n     * @param {?=} emoji\n     * @return {?}\n     */\n        function ($event, emoji) {\n            var _this = this;\n            if (!emoji) {\n                if (this.SEARCH_CATEGORY.emojis !== null && this.SEARCH_CATEGORY.emojis.length) {\n                    emoji = this.SEARCH_CATEGORY.emojis[0];\n                    if (emoji) {\n                        this.emojiSelect.emit({ $event: $event, emoji: emoji });\n                    }\n                    else {\n                        return;\n                    }\n                }\n            }\n            if (!this.hideRecent && !this.recent) {\n                this.frequently.add(( /** @type {?} */(emoji)));\n            }\n            /** @type {?} */\n            var component = this.categoryRefs.toArray()[1];\n            if (component) {\n                component.emojis = this.frequently.get(this.perLine, this.totalFrequentLines);\n                component.ref.markForCheck();\n                // TODO: decide if this is needed\n                setTimeout(function () {\n                    if (!_this.scrollRef) {\n                        return;\n                    }\n                    component.memoizeSize();\n                    _this.updateCategoriesSize();\n                    _this.handleScroll();\n                    if (_this.SEARCH_CATEGORY.emojis) {\n                        component.updateDisplay('none');\n                    }\n                });\n            }\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    PickerComponent.prototype.handleEmojiOver = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            if (!this.showPreview || !this.previewRef) {\n                return;\n            }\n            /** @type {?} */\n            var emojiData = /** @type {?} */ ((this.CUSTOM_CATEGORY.emojis)).find(function (customEmoji) { return customEmoji.id === $event.emoji.id; });\n            if (emojiData) {\n                $event.emoji = __assign({}, emojiData);\n            }\n            this.previewEmoji = $event.emoji;\n            clearTimeout(this.leaveTimeout);\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    PickerComponent.prototype.handleEmojiLeave = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            var _this = this;\n            if (!this.showPreview || !this.previewRef) {\n                return;\n            }\n            this.leaveTimeout = setTimeout(function () {\n                _this.previewEmoji = null;\n                _this.previewRef.ref.markForCheck();\n            }, 16);\n        };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    PickerComponent.prototype.handleEmojiClick = /**\n     * @param {?} $event\n     * @return {?}\n     */\n        function ($event) {\n            this.emojiClick.emit($event);\n            this.emojiSelect.emit($event);\n            this.handleEnterKey($event.$event, $event.emoji);\n        };\n    /**\n     * @param {?} skin\n     * @return {?}\n     */\n    PickerComponent.prototype.handleSkinChange = /**\n     * @param {?} skin\n     * @return {?}\n     */\n        function (skin) {\n            this.skin = skin;\n            localStorage.setItem(this.NAMESPACE + \".skin\", String(skin));\n        };\n    return PickerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar SkinComponent = /** @class */ /*@__PURE__*/ (function () {\n    function SkinComponent() {\n        this.change = new EventEmitter();\n        this.opened = false;\n        this.skinTones = [1, 2, 3, 4, 5, 6];\n    }\n    /**\n     * @return {?}\n     */\n    SkinComponent.prototype.toggleOpen = /**\n     * @return {?}\n     */\n        function () {\n            this.opened = !this.opened;\n        };\n    /**\n     * @param {?} skin\n     * @return {?}\n     */\n    SkinComponent.prototype.handleClick = /**\n     * @param {?} skin\n     * @return {?}\n     */\n        function (skin) {\n            if (!this.opened) {\n                this.opened = true;\n                return;\n            }\n            this.opened = false;\n            if (skin !== this.skin) {\n                this.change.emit(skin);\n            }\n        };\n    return SkinComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar components = [\n    PickerComponent,\n    AnchorsComponent,\n    CategoryComponent,\n    SearchComponent,\n    PreviewComponent,\n    SkinComponent,\n];\nvar PickerModule = /** @class */ /*@__PURE__*/ (function () {\n    function PickerModule() {\n    }\n    return PickerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { AnchorsComponent, CategoryComponent, EmojiFrequentlyService, EmojiSearch, PickerComponent, PickerModule, PreviewComponent, SearchComponent, SkinComponent };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}