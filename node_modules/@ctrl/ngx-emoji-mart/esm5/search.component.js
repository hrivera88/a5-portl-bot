/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { EmojiSearch } from './emoji-search.service';
var SearchComponent = /** @class */ (function () {
    function SearchComponent(emojiSearch) {
        this.emojiSearch = emojiSearch;
        this.maxResults = 75;
        this.autoFocus = false;
        this.include = [];
        this.exclude = [];
        this.custom = [];
        this.search = new EventEmitter();
        this.enterKey = new EventEmitter();
        this.isSearching = false;
        this.query = '';
    }
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.icon = this.icons["search"];
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.autoFocus) {
            this.inputRef.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.query = '';
        this.handleSearch('');
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchComponent.prototype.handleEnterKey = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.enterKey.emit($event);
        $event.preventDefault();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SearchComponent.prototype.handleSearch = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === '') {
            this.icon = this.icons["search"];
            this.isSearching = false;
        }
        else {
            this.icon = this.icons["delete"];
            this.isSearching = true;
        }
        this.search.emit(this.emojiSearch.search(this.query, this.emojisToShowFilter, this.maxResults, this.include, this.exclude, this.custom));
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.handleChange = /**
     * @return {?}
     */
    function () {
        this.handleSearch(this.query);
    };
    SearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'emoji-search',
                    template: "\n  <div class=\"emoji-mart-search\">\n    <input #inputRef type=\"text\"\n      (keyup.enter)=\"handleEnterKey($event)\"\n      [placeholder]=\"i18n.search\" [autofocus]=\"autoFocus\"\n      [(ngModel)]=\"query\" (ngModelChange)=\"handleChange()\" />\n    <button class=\"emoji-mart-search-icon\"\n      (click)=\"clear()\"\n      (keyup.enter)=\"clear()\"\n      [disabled]=\"!isSearching\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" width=\"13\" height=\"13\" opacity=\"0.5\">\n        <path [attr.d]=\"icon\" />\n      </svg>\n    </button>\n  </div>\n  ",
                    preserveWhitespaces: false
                }] }
    ];
    /** @nocollapse */
    SearchComponent.ctorParameters = function () { return [
        { type: EmojiSearch }
    ]; };
    SearchComponent.propDecorators = {
        maxResults: [{ type: Input }],
        autoFocus: [{ type: Input }],
        i18n: [{ type: Input }],
        include: [{ type: Input }],
        exclude: [{ type: Input }],
        custom: [{ type: Input }],
        icons: [{ type: Input }],
        emojisToShowFilter: [{ type: Input }],
        search: [{ type: Output }],
        enterKey: [{ type: Output }],
        inputRef: [{ type: ViewChild, args: ['inputRef',] }]
    };
    return SearchComponent;
}());
export { SearchComponent };
if (false) {
    /** @type {?} */
    SearchComponent.prototype.maxResults;
    /** @type {?} */
    SearchComponent.prototype.autoFocus;
    /** @type {?} */
    SearchComponent.prototype.i18n;
    /** @type {?} */
    SearchComponent.prototype.include;
    /** @type {?} */
    SearchComponent.prototype.exclude;
    /** @type {?} */
    SearchComponent.prototype.custom;
    /** @type {?} */
    SearchComponent.prototype.icons;
    /** @type {?} */
    SearchComponent.prototype.emojisToShowFilter;
    /** @type {?} */
    SearchComponent.prototype.search;
    /** @type {?} */
    SearchComponent.prototype.enterKey;
    /** @type {?} */
    SearchComponent.prototype.inputRef;
    /** @type {?} */
    SearchComponent.prototype.isSearching;
    /** @type {?} */
    SearchComponent.prototype.icon;
    /** @type {?} */
    SearchComponent.prototype.query;
    /** @type {?} */
    SearchComponent.prototype.emojiSearch;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjdHJsL25neC1lbW9qaS1tYXJ0LyIsInNvdXJjZXMiOlsic2VhcmNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7SUFzQ25ELHlCQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTswQkFmdEIsRUFBRTt5QkFDSCxLQUFLO3VCQUVHLEVBQUU7dUJBQ0YsRUFBRTtzQkFDTixFQUFFO3NCQUdSLElBQUksWUFBWSxFQUFPO3dCQUNyQixJQUFJLFlBQVksRUFBTzsyQkFFOUIsS0FBSztxQkFFWCxFQUFFO0tBRXNDOzs7O0lBRWhELGtDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQU0sVUFBTyxDQUFDO0tBQ2hDOzs7O0lBQ0QseUNBQWU7OztJQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3JDO0tBQ0Y7Ozs7SUFDRCwrQkFBSzs7O0lBQUw7UUFDRSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCOzs7OztJQUNELHdDQUFjOzs7O0lBQWQsVUFBZSxNQUFhO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztLQUN6Qjs7Ozs7SUFDRCxzQ0FBWTs7OztJQUFaLFVBQWEsS0FBYTtRQUN4QixJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBTSxVQUFPLENBQUM7WUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQU0sVUFBTyxDQUFDO1lBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQ3JCLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLGtCQUFrQixFQUN2QixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsTUFBTSxDQUNaLENBQ0YsQ0FBQztLQUNIOzs7O0lBQ0Qsc0NBQVk7OztJQUFaO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDL0I7O2dCQTNFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSw2a0JBZVQ7b0JBQ0QsbUJBQW1CLEVBQUUsS0FBSztpQkFDM0I7Ozs7Z0JBckJRLFdBQVc7Ozs2QkF1QmpCLEtBQUs7NEJBQ0wsS0FBSzt1QkFDTCxLQUFLOzBCQUNMLEtBQUs7MEJBQ0wsS0FBSzt5QkFDTCxLQUFLO3dCQUNMLEtBQUs7cUNBQ0wsS0FBSzt5QkFDTCxNQUFNOzJCQUNOLE1BQU07MkJBQ04sU0FBUyxTQUFDLFVBQVU7OzBCQTVDdkI7O1NBaUNhLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBFbW9qaVNlYXJjaCB9IGZyb20gJy4vZW1vamktc2VhcmNoLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdlbW9qaS1zZWFyY2gnLFxuICB0ZW1wbGF0ZTogYFxuICA8ZGl2IGNsYXNzPVwiZW1vamktbWFydC1zZWFyY2hcIj5cbiAgICA8aW5wdXQgI2lucHV0UmVmIHR5cGU9XCJ0ZXh0XCJcbiAgICAgIChrZXl1cC5lbnRlcik9XCJoYW5kbGVFbnRlcktleSgkZXZlbnQpXCJcbiAgICAgIFtwbGFjZWhvbGRlcl09XCJpMThuLnNlYXJjaFwiIFthdXRvZm9jdXNdPVwiYXV0b0ZvY3VzXCJcbiAgICAgIFsobmdNb2RlbCldPVwicXVlcnlcIiAobmdNb2RlbENoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoKVwiIC8+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImVtb2ppLW1hcnQtc2VhcmNoLWljb25cIlxuICAgICAgKGNsaWNrKT1cImNsZWFyKClcIlxuICAgICAgKGtleXVwLmVudGVyKT1cImNsZWFyKClcIlxuICAgICAgW2Rpc2FibGVkXT1cIiFpc1NlYXJjaGluZ1wiPlxuICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyMCAyMFwiIHdpZHRoPVwiMTNcIiBoZWlnaHQ9XCIxM1wiIG9wYWNpdHk9XCIwLjVcIj5cbiAgICAgICAgPHBhdGggW2F0dHIuZF09XCJpY29uXCIgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbiAgYCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCB7XG4gIEBJbnB1dCgpIG1heFJlc3VsdHMgPSA3NTtcbiAgQElucHV0KCkgYXV0b0ZvY3VzID0gZmFsc2U7XG4gIEBJbnB1dCgpIGkxOG46IGFueTtcbiAgQElucHV0KCkgaW5jbHVkZTogc3RyaW5nW10gPSBbXTtcbiAgQElucHV0KCkgZXhjbHVkZTogc3RyaW5nW10gPSBbXTtcbiAgQElucHV0KCkgY3VzdG9tOiBhbnlbXSA9IFtdO1xuICBASW5wdXQoKSBpY29ucz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIEBJbnB1dCgpIGVtb2ppc1RvU2hvd0ZpbHRlcj86ICh4OiBhbnkpID0+IGJvb2xlYW47XG4gIEBPdXRwdXQoKSBzZWFyY2ggPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGVudGVyS2V5ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBWaWV3Q2hpbGQoJ2lucHV0UmVmJykgcHJpdmF0ZSBpbnB1dFJlZiE6IEVsZW1lbnRSZWY7XG4gIGlzU2VhcmNoaW5nID0gZmFsc2U7XG4gIGljb24/OiBzdHJpbmc7XG4gIHF1ZXJ5ID0gJyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbW9qaVNlYXJjaDogRW1vamlTZWFyY2gpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pY29uID0gdGhpcy5pY29ucyEuc2VhcmNoO1xuICB9XG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5hdXRvRm9jdXMpIHtcbiAgICAgIHRoaXMuaW5wdXRSZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxuICBjbGVhcigpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gICAgdGhpcy5oYW5kbGVTZWFyY2goJycpO1xuICB9XG4gIGhhbmRsZUVudGVyS2V5KCRldmVudDogRXZlbnQpIHtcbiAgICB0aGlzLmVudGVyS2V5LmVtaXQoJGV2ZW50KTtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBoYW5kbGVTZWFyY2godmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuaWNvbiA9IHRoaXMuaWNvbnMhLnNlYXJjaDtcbiAgICAgIHRoaXMuaXNTZWFyY2hpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pY29uID0gdGhpcy5pY29ucyEuZGVsZXRlO1xuICAgICAgdGhpcy5pc1NlYXJjaGluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuc2VhcmNoLmVtaXQoXG4gICAgICB0aGlzLmVtb2ppU2VhcmNoLnNlYXJjaChcbiAgICAgICAgdGhpcy5xdWVyeSxcbiAgICAgICAgdGhpcy5lbW9qaXNUb1Nob3dGaWx0ZXIsXG4gICAgICAgIHRoaXMubWF4UmVzdWx0cyxcbiAgICAgICAgdGhpcy5pbmNsdWRlLFxuICAgICAgICB0aGlzLmV4Y2x1ZGUsXG4gICAgICAgIHRoaXMuY3VzdG9tLFxuICAgICAgKSxcbiAgICApO1xuICB9XG4gIGhhbmRsZUNoYW5nZSgpIHtcbiAgICB0aGlzLmhhbmRsZVNlYXJjaCh0aGlzLnF1ZXJ5KTtcbiAgfVxufVxuIl19