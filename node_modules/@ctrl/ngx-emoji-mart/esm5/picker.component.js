/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren, } from '@angular/core';
import { categories, } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { EmojiFrequentlyService } from './emoji-frequently.service';
import { PreviewComponent } from './preview.component';
import { SearchComponent } from './search.component';
import * as icons from './svgs';
import { measureScrollbar } from './utils';
/** @type {?} */
var I18N = {
    search: 'Search',
    notfound: 'No Emoji Found',
    categories: {
        search: 'Search Results',
        recent: 'Frequently Used',
        people: 'Smileys & People',
        nature: 'Animals & Nature',
        foods: 'Food & Drink',
        activity: 'Activity',
        places: 'Travel & Places',
        objects: 'Objects',
        symbols: 'Symbols',
        flags: 'Flags',
        custom: 'Custom',
    },
};
var PickerComponent = /** @class */ (function () {
    function PickerComponent(ref, frequently) {
        var _this = this;
        this.ref = ref;
        this.frequently = frequently;
        this.perLine = 9;
        this.totalFrequentLines = 4;
        this.i18n = {};
        this.style = {};
        this.title = 'Emoji Martâ„¢';
        this.emoji = 'department_store';
        this.color = '#ae65c5';
        this.hideObsolete = true;
        /**
         * all categories shown
         */
        this.categories = [];
        /**
         * used to temporarily draw categories
         */
        this.activeCategories = [];
        this.set = 'apple';
        this.skin = 1;
        this.native = false;
        this.emojiSize = 24;
        this.sheetSize = 64;
        this.showPreview = true;
        this.emojiTooltip = false;
        this.autoFocus = false;
        this.custom = [];
        this.hideRecent = true;
        this.notFoundEmoji = 'sleuth_or_spy';
        this.categoriesIcons = icons.categories;
        this.searchIcons = icons.search;
        this.emojiClick = new EventEmitter();
        this.emojiSelect = new EventEmitter();
        this.scrollHeight = 0;
        this.clientHeight = 0;
        this.firstRender = true;
        this.NAMESPACE = 'emoji-mart';
        this.measureScrollbar = 0;
        this.RECENT_CATEGORY = {
            id: 'recent',
            name: 'Recent',
            emojis: null,
        };
        this.SEARCH_CATEGORY = {
            id: 'search',
            name: 'Search',
            emojis: null,
            anchor: false,
        };
        this.CUSTOM_CATEGORY = {
            id: 'custom',
            name: 'Custom',
            emojis: [],
        };
        this.backgroundImageFn = function (set, sheetSize) {
            return "https://unpkg.com/emoji-datasource-" + _this.set + "@4.0.4/img/" + _this.set + "/sheets-256/" + _this.sheetSize + ".png";
        };
    }
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        // measure scroll
        this.measureScrollbar = measureScrollbar();
        this.i18n = tslib_1.__assign({}, I18N, this.i18n);
        this.i18n.categories = tslib_1.__assign({}, I18N.categories, this.i18n.categories);
        this.skin =
            JSON.parse(localStorage.getItem(this.NAMESPACE + ".skin") || 'null') ||
                this.skin;
        /** @type {?} */
        var allCategories = tslib_1.__spread(categories);
        if (this.custom.length > 0) {
            this.CUSTOM_CATEGORY.emojis = this.custom.map(function (emoji) {
                return tslib_1.__assign({}, emoji, { id: emoji.short_names[0], custom: true });
            });
            allCategories.push(this.CUSTOM_CATEGORY);
        }
        if (this.include !== undefined) {
            allCategories.sort(function (a, b) {
                if (/** @type {?} */ ((_this.include)).indexOf(a.id) > /** @type {?} */ ((_this.include)).indexOf(b.id)) {
                    return 1;
                }
                return -1;
            });
        }
        try {
            for (var allCategories_1 = tslib_1.__values(allCategories), allCategories_1_1 = allCategories_1.next(); !allCategories_1_1.done; allCategories_1_1 = allCategories_1.next()) {
                var category = allCategories_1_1.value;
                /** @type {?} */
                var isIncluded = this.include && this.include.length
                    ? this.include.indexOf(category.id) > -1
                    : true;
                /** @type {?} */
                var isExcluded = this.exclude && this.exclude.length
                    ? this.exclude.indexOf(category.id) > -1
                    : false;
                if (!isIncluded || isExcluded) {
                    continue;
                }
                if (this.emojisToShowFilter) {
                    /** @type {?} */
                    var newEmojis = [];
                    var emojis = category.emojis;
                    for (var emojiIndex = 0; emojiIndex < /** @type {?} */ ((emojis)).length; emojiIndex++) {
                        /** @type {?} */
                        var emoji = /** @type {?} */ ((emojis))[emojiIndex];
                        if (this.emojisToShowFilter(emoji)) {
                            newEmojis.push(emoji);
                        }
                    }
                    if (newEmojis.length) {
                        /** @type {?} */
                        var newCategory = {
                            emojis: newEmojis,
                            name: category.name,
                            id: category.id,
                        };
                        this.categories.push(newCategory);
                    }
                }
                else {
                    this.categories.push(category);
                }
                this.categoriesIcons = tslib_1.__assign({}, icons.categories, this.categoriesIcons);
                this.searchIcons = tslib_1.__assign({}, icons.search, this.searchIcons);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (allCategories_1_1 && !allCategories_1_1.done && (_a = allCategories_1.return)) _a.call(allCategories_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        /** @type {?} */
        var includeRecent = this.include && this.include.length
            ? this.include.indexOf(this.RECENT_CATEGORY.id) > -1
            : true;
        /** @type {?} */
        var excludeRecent = this.exclude && this.exclude.length
            ? this.exclude.indexOf(this.RECENT_CATEGORY.id) > -1
            : false;
        if (includeRecent && !excludeRecent) {
            this.hideRecent = false;
            this.categories.unshift(this.RECENT_CATEGORY);
        }
        if (this.categories[0]) {
            this.categories[0].first = true;
        }
        this.categories.unshift(this.SEARCH_CATEGORY);
        this.selected = this.categories.filter(function (category) { return category.first; })[0].name;
        this.activeCategories = this.categories.slice(0, 3);
        setTimeout(function () {
            _this.activeCategories = _this.categories;
            _this.ref.markForCheck();
            setTimeout(function () { return _this.updateCategoriesSize(); });
        });
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.updateCategoriesSize = /**
     * @return {?}
     */
    function () {
        this.categoryRefs.forEach(function (component) { return component.memoizeSize(); });
        if (this.scrollRef) {
            /** @type {?} */
            var target = this.scrollRef.nativeElement;
            this.scrollHeight = target.scrollHeight;
            this.clientHeight = target.clientHeight;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PickerComponent.prototype.handleAnchorClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.updateCategoriesSize();
        /** @type {?} */
        var component = this.categoryRefs.find(function (n) { return n.id === $event.category.id; });
        if (this.SEARCH_CATEGORY.emojis) {
            this.handleSearch(null);
            this.searchRef.clear();
        }
        if (component) {
            var top_1 = component.top;
            if ($event.category.first) {
                top_1 = 0;
            }
            else {
                top_1 += 1;
            }
            this.scrollRef.nativeElement.scrollTop = top_1;
        }
        this.selected = $event.category.name;
        this.nextScroll = $event.category.name;
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    PickerComponent.prototype.categoryTrack = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item.id;
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.handleScroll = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        if (this.nextScroll) {
            this.selected = this.nextScroll;
            this.nextScroll = undefined;
            return;
        }
        if (!this.scrollRef) {
            return;
        }
        /** @type {?} */
        var activeCategory = null;
        if (this.SEARCH_CATEGORY.emojis) {
            activeCategory = this.SEARCH_CATEGORY;
        }
        else {
            /** @type {?} */
            var target = this.scrollRef.nativeElement;
            // check scroll is not at bottom
            if (target.scrollTop === 0) {
                // hit the TOP
                activeCategory = this.categories.find(function (n) { return n.first === true; });
            }
            else if (target.scrollHeight - target.scrollTop === this.clientHeight) {
                // scrolled to bottom activate last category
                activeCategory = this.categories[this.categories.length - 1];
            }
            else {
                var _loop_1 = function (category) {
                    /** @type {?} */
                    var component = this_1.categoryRefs.find(function (n) { return n.id === category.id; });
                    /** @type {?} */
                    var active = /** @type {?} */ ((component)).handleScroll(target.scrollTop);
                    if (active) {
                        activeCategory = category;
                    }
                };
                var this_1 = this;
                try {
                    // scrolling
                    for (var _b = tslib_1.__values(this.categories), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var category = _c.value;
                        _loop_1(category);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            this.scrollTop = target.scrollTop;
        }
        if (activeCategory) {
            this.selected = activeCategory.name;
        }
    };
    /**
     * @param {?} $emojis
     * @return {?}
     */
    PickerComponent.prototype.handleSearch = /**
     * @param {?} $emojis
     * @return {?}
     */
    function ($emojis) {
        var e_3, _a;
        this.SEARCH_CATEGORY.emojis = $emojis;
        try {
            for (var _b = tslib_1.__values(this.categoryRefs.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var component = _c.value;
                if (component.name === 'Search') {
                    component.emojis = $emojis;
                    component.updateDisplay($emojis ? 'block' : 'none');
                }
                else {
                    component.updateDisplay($emojis ? 'none' : 'block');
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // this.forceUpdate();
        this.scrollRef.nativeElement.scrollTop = 0;
        this.handleScroll();
    };
    /**
     * @param {?} $event
     * @param {?=} emoji
     * @return {?}
     */
    PickerComponent.prototype.handleEnterKey = /**
     * @param {?} $event
     * @param {?=} emoji
     * @return {?}
     */
    function ($event, emoji) {
        var _this = this;
        if (!emoji) {
            if (this.SEARCH_CATEGORY.emojis !== null && this.SEARCH_CATEGORY.emojis.length) {
                emoji = this.SEARCH_CATEGORY.emojis[0];
                if (emoji) {
                    this.emojiSelect.emit({ $event: $event, emoji: emoji });
                }
                else {
                    return;
                }
            }
        }
        if (!this.hideRecent && !this.recent) {
            this.frequently.add((/** @type {?} */ (emoji)));
        }
        /** @type {?} */
        var component = this.categoryRefs.toArray()[1];
        if (component) {
            component.emojis = this.frequently.get(this.perLine, this.totalFrequentLines);
            component.ref.markForCheck();
            // TODO: decide if this is needed
            setTimeout(function () {
                if (!_this.scrollRef) {
                    return;
                }
                component.memoizeSize();
                _this.updateCategoriesSize();
                _this.handleScroll();
                if (_this.SEARCH_CATEGORY.emojis) {
                    component.updateDisplay('none');
                }
            });
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PickerComponent.prototype.handleEmojiOver = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this.showPreview || !this.previewRef) {
            return;
        }
        /** @type {?} */
        var emojiData = /** @type {?} */ ((this.CUSTOM_CATEGORY.emojis)).find(function (customEmoji) { return customEmoji.id === $event.emoji.id; });
        if (emojiData) {
            $event.emoji = tslib_1.__assign({}, emojiData);
        }
        this.previewEmoji = $event.emoji;
        clearTimeout(this.leaveTimeout);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PickerComponent.prototype.handleEmojiLeave = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!this.showPreview || !this.previewRef) {
            return;
        }
        this.leaveTimeout = setTimeout(function () {
            _this.previewEmoji = null;
            _this.previewRef.ref.markForCheck();
        }, 16);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PickerComponent.prototype.handleEmojiClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.emojiClick.emit($event);
        this.emojiSelect.emit($event);
        this.handleEnterKey($event.$event, $event.emoji);
    };
    /**
     * @param {?} skin
     * @return {?}
     */
    PickerComponent.prototype.handleSkinChange = /**
     * @param {?} skin
     * @return {?}
     */
    function (skin) {
        this.skin = skin;
        localStorage.setItem(this.NAMESPACE + ".skin", String(skin));
    };
    PickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'emoji-mart',
                    template: "<div class=\"emoji-mart\"\n  [style.width.px]=\"perLine * (emojiSize + 12) + 12 + 2 + measureScrollbar\"\n  [ngStyle]=\"style\">\n  <div class=\"emoji-mart-bar\">\n    <emoji-mart-anchors\n      [categories]=\"categories\"\n      (anchorClick)=\"handleAnchorClick($event)\"\n      [color]=\"color\"\n      [selected]=\"selected\"\n      [i18n]=\"i18n\"\n      [icons]=\"categoriesIcons\"\n    ></emoji-mart-anchors>\n  </div>\n  <emoji-search\n    #searchRef\n    [i18n]=\"i18n\"\n    (search)=\"handleSearch($event)\"\n    (enterKey)=\"handleEnterKey($event)\"\n    [include]=\"include\"\n    [exclude]=\"exclude\"\n    [custom]=\"custom\"\n    [autoFocus]=\"autoFocus\"\n    [icons]=\"searchIcons\"\n    [emojisToShowFilter]=\"emojisToShowFilter\"\n  ></emoji-search>\n  <div #scrollRef class=\"emoji-mart-scroll\" (scroll)=\"handleScroll()\">\n    <emoji-category\n      *ngFor=\"let category of activeCategories; let idx = index; trackBy: categoryTrack\"\n      #categoryRef\n      [id]=\"category.id\"\n      [name]=\"category.name\"\n      [emojis]=\"category.emojis\"\n      [perLine]=\"perLine\"\n      [totalFrequentLines]=\"totalFrequentLines\"\n      [native]=\"native\"\n      [hasStickyPosition]=\"native\"\n      [i18n]=\"i18n\"\n      [hideObsolete]=\"hideObsolete\"\n      [notFoundEmoji]=\"notFoundEmoji\"\n      [custom]=\"category.id == RECENT_CATEGORY.id ? CUSTOM_CATEGORY.emojis : undefined\"\n      [recent]=\"category.id == RECENT_CATEGORY.id ? recent : undefined\"\n      [emojiNative]=\"native\"\n      [emojiSkin]=\"skin\"\n      [emojiSize]=\"emojiSize\"\n      [emojiSet]=\"set\"\n      [emojiSheetSize]=\"sheetSize\"\n      [emojiForceSize]=\"native\"\n      [emojiTooltip]=\"emojiTooltip\"\n      [emojiBackgroundImageFn]=\"backgroundImageFn\"\n      (emojiOver)=\"handleEmojiOver($event)\"\n      (emojiLeave)=\"handleEmojiLeave($event)\"\n      (emojiClick)=\"handleEmojiClick($event)\"\n    ></emoji-category>\n  </div>\n  <div class=\"emoji-mart-bar\" *ngIf=\"showPreview\">\n    <emoji-preview\n      #previewRef\n      [title]=\"title\"\n      [emoji]=\"previewEmoji\"\n      [idleEmoji]=\"emoji\"\n\n      [emojiNative]=\"native\"\n      [emojiSize]=\"38\"\n      [emojiSkin]=\"skin\"\n      [emojiSet]=\"set\"\n      [emojiSheetSize]=\"sheetSize\"\n      [emojiBackgroundImageFn]=\"backgroundImageFn\"\n      (skinChange)=\"handleSkinChange($event)\"\n    ></emoji-preview>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                }] }
    ];
    /** @nocollapse */
    PickerComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: EmojiFrequentlyService }
    ]; };
    PickerComponent.propDecorators = {
        perLine: [{ type: Input }],
        totalFrequentLines: [{ type: Input }],
        i18n: [{ type: Input }],
        style: [{ type: Input }],
        title: [{ type: Input }],
        emoji: [{ type: Input }],
        color: [{ type: Input }],
        hideObsolete: [{ type: Input }],
        categories: [{ type: Input }],
        activeCategories: [{ type: Input }],
        set: [{ type: Input }],
        skin: [{ type: Input }],
        native: [{ type: Input }],
        emojiSize: [{ type: Input }],
        sheetSize: [{ type: Input }],
        emojisToShowFilter: [{ type: Input }],
        showPreview: [{ type: Input }],
        emojiTooltip: [{ type: Input }],
        autoFocus: [{ type: Input }],
        custom: [{ type: Input }],
        hideRecent: [{ type: Input }],
        include: [{ type: Input }],
        exclude: [{ type: Input }],
        notFoundEmoji: [{ type: Input }],
        categoriesIcons: [{ type: Input }],
        searchIcons: [{ type: Input }],
        emojiClick: [{ type: Output }],
        emojiSelect: [{ type: Output }],
        scrollRef: [{ type: ViewChild, args: ['scrollRef',] }],
        previewRef: [{ type: ViewChild, args: ['previewRef',] }],
        searchRef: [{ type: ViewChild, args: ['searchRef',] }],
        categoryRefs: [{ type: ViewChildren, args: ['categoryRef',] }],
        backgroundImageFn: [{ type: Input }]
    };
    return PickerComponent;
}());
export { PickerComponent };
if (false) {
    /** @type {?} */
    PickerComponent.prototype.perLine;
    /** @type {?} */
    PickerComponent.prototype.totalFrequentLines;
    /** @type {?} */
    PickerComponent.prototype.i18n;
    /** @type {?} */
    PickerComponent.prototype.style;
    /** @type {?} */
    PickerComponent.prototype.title;
    /** @type {?} */
    PickerComponent.prototype.emoji;
    /** @type {?} */
    PickerComponent.prototype.color;
    /** @type {?} */
    PickerComponent.prototype.hideObsolete;
    /**
     * all categories shown
     * @type {?}
     */
    PickerComponent.prototype.categories;
    /**
     * used to temporarily draw categories
     * @type {?}
     */
    PickerComponent.prototype.activeCategories;
    /** @type {?} */
    PickerComponent.prototype.set;
    /** @type {?} */
    PickerComponent.prototype.skin;
    /** @type {?} */
    PickerComponent.prototype.native;
    /** @type {?} */
    PickerComponent.prototype.emojiSize;
    /** @type {?} */
    PickerComponent.prototype.sheetSize;
    /** @type {?} */
    PickerComponent.prototype.emojisToShowFilter;
    /** @type {?} */
    PickerComponent.prototype.showPreview;
    /** @type {?} */
    PickerComponent.prototype.emojiTooltip;
    /** @type {?} */
    PickerComponent.prototype.autoFocus;
    /** @type {?} */
    PickerComponent.prototype.custom;
    /** @type {?} */
    PickerComponent.prototype.hideRecent;
    /** @type {?} */
    PickerComponent.prototype.include;
    /** @type {?} */
    PickerComponent.prototype.exclude;
    /** @type {?} */
    PickerComponent.prototype.notFoundEmoji;
    /** @type {?} */
    PickerComponent.prototype.categoriesIcons;
    /** @type {?} */
    PickerComponent.prototype.searchIcons;
    /** @type {?} */
    PickerComponent.prototype.emojiClick;
    /** @type {?} */
    PickerComponent.prototype.emojiSelect;
    /** @type {?} */
    PickerComponent.prototype.scrollRef;
    /** @type {?} */
    PickerComponent.prototype.previewRef;
    /** @type {?} */
    PickerComponent.prototype.searchRef;
    /** @type {?} */
    PickerComponent.prototype.categoryRefs;
    /** @type {?} */
    PickerComponent.prototype.scrollHeight;
    /** @type {?} */
    PickerComponent.prototype.clientHeight;
    /** @type {?} */
    PickerComponent.prototype.selected;
    /** @type {?} */
    PickerComponent.prototype.nextScroll;
    /** @type {?} */
    PickerComponent.prototype.scrollTop;
    /** @type {?} */
    PickerComponent.prototype.firstRender;
    /** @type {?} */
    PickerComponent.prototype.recent;
    /** @type {?} */
    PickerComponent.prototype.previewEmoji;
    /** @type {?} */
    PickerComponent.prototype.leaveTimeout;
    /** @type {?} */
    PickerComponent.prototype.NAMESPACE;
    /** @type {?} */
    PickerComponent.prototype.measureScrollbar;
    /** @type {?} */
    PickerComponent.prototype.RECENT_CATEGORY;
    /** @type {?} */
    PickerComponent.prototype.SEARCH_CATEGORY;
    /** @type {?} */
    PickerComponent.prototype.CUSTOM_CATEGORY;
    /** @type {?} */
    PickerComponent.prototype.backgroundImageFn;
    /** @type {?} */
    PickerComponent.prototype.ref;
    /** @type {?} */
    PickerComponent.prototype.frequently;
}

//# sourceMappingURL=data:application/json;base64,