/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { emojis } from './data/emojis';
/** @type {?} */
const COLONS_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
/** @type {?} */
const SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];
export class EmojiService {
    constructor() {
        this.uncompressed = false;
        this.names = {};
        this.emojis = [];
        if (!this.uncompressed) {
            this.uncompress(emojis);
            this.uncompressed = true;
        }
    }
    /**
     * @param {?} list
     * @return {?}
     */
    uncompress(list) {
        this.emojis = list.map(emoji => {
            /** @type {?} */
            const data = Object.assign({}, emoji);
            if (!data.short_names) {
                data.short_names = [];
            }
            data.short_names.unshift(data.short_name);
            data.id = data.short_name;
            data.native = this.unifiedToNative(data.unified);
            if (!data.skin_variations) {
                data.skin_variations = [];
            }
            if (!data.keywords) {
                data.keywords = [];
            }
            if (!data.emoticons) {
                data.emoticons = [];
            }
            if (!data.hidden) {
                data.hidden = [];
            }
            if (!data.text) {
                data.text = '';
            }
            if (data.obsoletes) {
                /** @type {?} */
                const f = list.find(x => x.unified === data.obsoletes);
                if (f) {
                    if (f.keywords) {
                        data.keywords = [...data.keywords, ...f.keywords, f.short_name];
                    }
                    else {
                        data.keywords = [...data.keywords, f.short_name];
                    }
                }
            }
            this.names[data.unified] = data;
            for (const n of data.short_names) {
                this.names[n] = data;
            }
            return data;
        });
    }
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    getData(emoji, skin, set) {
        /** @type {?} */
        let emojiData;
        if (typeof emoji === 'string') {
            /** @type {?} */
            const matches = emoji.match(COLONS_REGEX);
            if (matches) {
                emoji = matches[1];
                if (matches[2]) {
                    skin = /** @type {?} */ (parseInt(matches[2], 10));
                }
            }
            if (this.names.hasOwnProperty(emoji)) {
                emojiData = this.names[emoji];
            }
            else {
                return null;
            }
        }
        else if (emoji.id) {
            emojiData = this.names[emoji.id];
        }
        if (!emojiData) {
            emojiData = emoji;
            emojiData.custom = true;
        }
        /** @type {?} */
        const hasSkinVariations = emojiData.skin_variations && emojiData.skin_variations.length;
        if (hasSkinVariations && skin && skin > 1 && set) {
            emojiData = Object.assign({}, emojiData);
            /** @type {?} */
            const skinKey = SKINS[skin - 1];
            /** @type {?} */
            const variationData = /** @type {?} */ (emojiData.skin_variations.find((n) => n.unified.includes(skinKey)));
            if (!variationData.variations && emojiData.variations) {
                delete emojiData.variations;
            }
            if (!variationData.hidden || !variationData.hidden.includes(set)) {
                emojiData.skin_tone = skin;
                emojiData = Object.assign({}, emojiData, variationData);
            }
            emojiData.native = this.unifiedToNative(emojiData.unified);
        }
        if (emojiData.variations && emojiData.variations.length) {
            emojiData = Object.assign({}, emojiData);
            emojiData.unified = /** @type {?} */ (emojiData.variations.shift());
        }
        emojiData.set = set || '';
        return /** @type {?} */ (emojiData);
    }
    /**
     * @param {?} unified
     * @return {?}
     */
    unifiedToNative(unified) {
        /** @type {?} */
        const codePoints = unified.split('-').map(u => parseInt(`0x${u}`, 16));
        return String.fromCodePoint(...codePoints);
    }
    /**
     * @param {?} emoji
     * @return {?}
     */
    sanitize(emoji) {
        if (emoji === null) {
            return null;
        }
        /** @type {?} */
        const id = emoji.id || emoji.short_names[0];
        /** @type {?} */
        let colons = `:${id}:`;
        if (emoji.skin_tone) {
            colons += `:skin-tone-${emoji.skin_tone}:`;
        }
        emoji.colons = colons;
        return Object.assign({}, emoji);
    }
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    getSanitizedData(emoji, skin, set) {
        return this.sanitize(this.getData(emoji, skin, set));
    }
}
EmojiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EmojiService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    EmojiService.prototype.uncompressed;
    /** @type {?} */
    EmojiService.prototype.names;
    /** @type {?} */
    EmojiService.prototype.emojis;
}

//# sourceMappingURL=data:application/json;base64,