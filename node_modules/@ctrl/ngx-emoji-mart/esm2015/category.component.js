/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { EmojiService } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { EmojiFrequentlyService } from './emoji-frequently.service';
export class CategoryComponent {
    /**
     * @param {?} ref
     * @param {?} emojiService
     * @param {?} frequently
     */
    constructor(ref, emojiService, frequently) {
        this.ref = ref;
        this.emojiService = emojiService;
        this.frequently = frequently;
        this.hasStickyPosition = true;
        this.name = '';
        this.native = true;
        this.perLine = 9;
        this.totalFrequentLines = 4;
        this.recent = [];
        this.custom = [];
        this.hideObsolete = true;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.containerStyles = {};
        this.labelStyles = {};
        this.labelSpanStyles = {};
        this.margin = 0;
        this.minMargin = 0;
        this.maxMargin = 0;
        this.top = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.emojis = this.getEmojis();
        if (!this.emojis) {
            this.containerStyles = { display: 'none' };
        }
        if (!this.hasStickyPosition) {
            this.labelStyles = { height: 28 };
            this.labelSpanStyles = { position: 'absolute' };
        }
    }
    /**
     * @return {?}
     */
    memoizeSize() {
        /** @type {?} */
        const parent = this.container.nativeElement.parentNode.parentNode;
        const { top, height, } = this.container.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const parentTop = parent.getBoundingClientRect().top;
        /** @type {?} */
        const labelHeight = this.label.nativeElement.getBoundingClientRect().height;
        this.top = top - parentTop + parent.scrollTop;
        if (height === 0) {
            this.maxMargin = 0;
        }
        else {
            this.maxMargin = height - labelHeight;
        }
    }
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    handleScroll(scrollTop) {
        /** @type {?} */
        let margin = scrollTop - this.top;
        margin = margin < this.minMargin ? this.minMargin : margin;
        margin = margin > this.maxMargin ? this.maxMargin : margin;
        if (margin === this.margin) {
            return false;
        }
        if (!this.hasStickyPosition) {
            this.label.nativeElement.style.top = `${margin}px`;
        }
        this.margin = margin;
        return true;
    }
    /**
     * @return {?}
     */
    getEmojis() {
        if (this.name === 'Recent') {
            /** @type {?} */
            let frequentlyUsed = this.recent || this.frequently.get(this.perLine, this.totalFrequentLines);
            if (!frequentlyUsed || !frequentlyUsed.length) {
                frequentlyUsed = this.frequently.get(this.perLine, this.totalFrequentLines);
            }
            if (frequentlyUsed.length) {
                this.emojis = frequentlyUsed
                    .map(id => {
                    /** @type {?} */
                    const emoji = this.custom.filter((e) => e.id === id)[0];
                    if (emoji) {
                        return emoji;
                    }
                    return id;
                })
                    .filter(id => !!this.emojiService.getData(id));
            }
            if ((!this.emojis || this.emojis.length === 0) && frequentlyUsed.length > 0) {
                return null;
            }
        }
        if (this.emojis) {
            this.emojis = this.emojis.slice(0);
        }
        return this.emojis;
    }
    /**
     * @param {?} display
     * @return {?}
     */
    updateDisplay(display) {
        this.containerStyles.display = display;
        this.getEmojis();
        this.ref.detectChanges();
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackById(index, item) {
        return item;
    }
}
CategoryComponent.decorators = [
    { type: Component, args: [{
                selector: 'emoji-category',
                template: `
  <div #container class="emoji-mart-category"
    [class.emoji-mart-no-results]="emojis && !emojis.length"
    [ngStyle]="containerStyles">
    <div class="emoji-mart-category-label"
      [ngStyle]="labelStyles"
      [attr.data-name]="name">
      <span style="labelSpanStyles" #label>
        {{ i18n.categories[id] }}
      </span>
    </div>

    <ng-template [ngIf]="emojis">
      <ngx-emoji
        *ngFor="let emoji of emojis; trackBy: trackById"
        [emoji]="emoji"
        [size]="emojiSize"
        [skin]="emojiSkin"
        [native]="emojiNative"
        [set]="emojiSet"
        [sheetSize]="emojiSheetSize"
        [forceSize]="emojiForceSize"
        [tooltip]="emojiTooltip"
        [backgroundImageFn]="emojiBackgroundImageFn"
        [hideObsolete]="hideObsolete"
        (emojiOver)="emojiOver.emit($event)"
        (emojiLeave)="emojiLeave.emit($event)"
        (emojiClick)="emojiClick.emit($event)"
      ></ngx-emoji>
    </ng-template>

    <div *ngIf="emojis && !emojis.length">
      <div>
        <ngx-emoji
          [emoji]="notFoundEmoji"
          size="38"
          [skin]="emojiSkin"
          [native]="emojiNative"
          [set]="emojiSet"
          [sheetSize]="emojiSheetSize"
          [forceSize]="emojiForceSize"
          [tooltip]="emojiTooltip"
          [backgroundImageFn]="emojiBackgroundImageFn"
        ></ngx-emoji>
      </div>

      <div class="emoji-mart-no-results-label">
        {{ i18n.notfound }}
      </div>
    </div>

  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            }] }
];
/** @nocollapse */
CategoryComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: EmojiService },
    { type: EmojiFrequentlyService }
];
CategoryComponent.propDecorators = {
    emojis: [{ type: Input }],
    hasStickyPosition: [{ type: Input }],
    name: [{ type: Input }],
    native: [{ type: Input }],
    perLine: [{ type: Input }],
    totalFrequentLines: [{ type: Input }],
    recent: [{ type: Input }],
    custom: [{ type: Input }],
    i18n: [{ type: Input }],
    id: [{ type: Input }],
    hideObsolete: [{ type: Input }],
    notFoundEmoji: [{ type: Input }],
    emojiNative: [{ type: Input }],
    emojiSkin: [{ type: Input }],
    emojiSize: [{ type: Input }],
    emojiSet: [{ type: Input }],
    emojiSheetSize: [{ type: Input }],
    emojiForceSize: [{ type: Input }],
    emojiTooltip: [{ type: Input }],
    emojiBackgroundImageFn: [{ type: Input }],
    emojiOver: [{ type: Output }],
    emojiLeave: [{ type: Output }],
    emojiClick: [{ type: Output }],
    container: [{ type: ViewChild, args: ['container',] }],
    label: [{ type: ViewChild, args: ['label',] }]
};
if (false) {
    /** @type {?} */
    CategoryComponent.prototype.emojis;
    /** @type {?} */
    CategoryComponent.prototype.hasStickyPosition;
    /** @type {?} */
    CategoryComponent.prototype.name;
    /** @type {?} */
    CategoryComponent.prototype.native;
    /** @type {?} */
    CategoryComponent.prototype.perLine;
    /** @type {?} */
    CategoryComponent.prototype.totalFrequentLines;
    /** @type {?} */
    CategoryComponent.prototype.recent;
    /** @type {?} */
    CategoryComponent.prototype.custom;
    /** @type {?} */
    CategoryComponent.prototype.i18n;
    /** @type {?} */
    CategoryComponent.prototype.id;
    /** @type {?} */
    CategoryComponent.prototype.hideObsolete;
    /** @type {?} */
    CategoryComponent.prototype.notFoundEmoji;
    /** @type {?} */
    CategoryComponent.prototype.emojiNative;
    /** @type {?} */
    CategoryComponent.prototype.emojiSkin;
    /** @type {?} */
    CategoryComponent.prototype.emojiSize;
    /** @type {?} */
    CategoryComponent.prototype.emojiSet;
    /** @type {?} */
    CategoryComponent.prototype.emojiSheetSize;
    /** @type {?} */
    CategoryComponent.prototype.emojiForceSize;
    /** @type {?} */
    CategoryComponent.prototype.emojiTooltip;
    /** @type {?} */
    CategoryComponent.prototype.emojiBackgroundImageFn;
    /** @type {?} */
    CategoryComponent.prototype.emojiOver;
    /** @type {?} */
    CategoryComponent.prototype.emojiLeave;
    /** @type {?} */
    CategoryComponent.prototype.emojiClick;
    /** @type {?} */
    CategoryComponent.prototype.container;
    /** @type {?} */
    CategoryComponent.prototype.label;
    /** @type {?} */
    CategoryComponent.prototype.containerStyles;
    /** @type {?} */
    CategoryComponent.prototype.labelStyles;
    /** @type {?} */
    CategoryComponent.prototype.labelSpanStyles;
    /** @type {?} */
    CategoryComponent.prototype.margin;
    /** @type {?} */
    CategoryComponent.prototype.minMargin;
    /** @type {?} */
    CategoryComponent.prototype.maxMargin;
    /** @type {?} */
    CategoryComponent.prototype.top;
    /** @type {?} */
    CategoryComponent.prototype.ref;
    /** @type {?} */
    CategoryComponent.prototype.emojiService;
    /** @type {?} */
    CategoryComponent.prototype.frequently;
}

//# sourceMappingURL=data:application/json;base64,